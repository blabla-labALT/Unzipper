import PySimpleGUI as sg
from pyunpack import Archive
import os
import py7zr
APP_ICON = b""
ERR_ICN = b""
# Custom ghj PySimpleGUI Theme.
# Generated using Themera v1.0.0.
ghj_themedict = {'BACKGROUND': '#0066db',
    'TEXT': 'white',
    'INPUT': '#ccc',
    'TEXT_INPUT': '#4c4c4c',
    'SCROLL': '#666',
    'BUTTON': ('#333', '#d9d9f2'),
    'PROGRESS': ('#99ff9a', '#a0a0a0'),
    'BORDER': 0,
    'SLIDER_DEPTH': 0,
    'PROGRESS_DEPTH': 0}

sg.theme_add_new('ghj', ghj_themedict)
sg.theme('ghj')


sg.set_options(icon=APP_ICON, font=("Outfit"))
# All the stuff inside your window.
layout = [  [sg.Text('UnZipper', font=("Outfit", 20))],
            [sg.Text("Statues:"), sg.Text(" ", key = "-ST")],
            [sg.Text('Archive path:'), sg.InputText(key="-IN"), sg.FileBrowse()],
            [sg.Button("Extract"), sg.Button('Cancel')] ]

# Create the Window
window = sg.Window('UnZipper', layout)
# Event Loop to process "events" and get the "values" of the inputs
while True:
    event, values = window.read()
    if event == sg.WIN_CLOSED or event == 'Cancel': # if user closes window or clicks cancel
        break
    elif event == "Extract":
        window['-ST'].update("Preparing...")
        file_safe = None
        output_safe = None
        file_path =  values["-IN"]
        output_path = file_path.split("/")
        print(output_path)
        output_path = output_path[0:-1]
        output_path = "/".join(output_path)
        # saftey check
        window['-ST'].update("Checking saftey...")
        if os.path.isdir(output_path):
            if os.path.isfile(file_path):
                print(f"\n------\nOutput path : {output_path} \n\nIs folder : True\n---\nfile path : {file_path} \n\nIs file : True\n---\n GOOD")
                file_safe = True
                output_safe = True
            else:
                print(f"\n------\nOutput path : {output_path} \n\nIs folder : True\n---\nfile path : {file_path} \n\nIs file : False\n---\n BAD")
                file_safe = False
                output_safe = True
        else:
            if os.path.isfile(file_path):
                print(f"\n------\nOutput path : {output_path} \n\nIs folder : False\n---\nfile path : {file_path} \n\nIs file : True\n---\n BAD")
                file_safe = True
                output_safe = False
            else:
                print(f"\n------\nOutput path : {output_path} \n\nIs folder : False\n---\nfile path : {file_path} \n\nIs file : False\n---\n BAD")
                file_safe = False
                output_safe = False
        # ---
        window['-ST'].update("Reviewing saftey reslts...")
        if file_safe == True and output_safe == True:
            window['-ST'].update("Extracting...")
            try:
                Archive(file_path).extractall(output_path)
            except:
                try:
                    with py7zr.SevenZipFile(file_path, 'r') as archive:
                        archive.extractall(path=output_path)
                except Exception as err:
                    window['-ST'].update("ERROR")
                    sg.popup_error(f"ERROR OCCURRED WHILE EXTRACTING\n\nMORE INFORMATION:{err}", title="Error", icon=ERR_ICN)
                else:
                    window['-ST'].update("Done")
                    sg.popup_quick_message("Achieve successfully extracted.", auto_close_duration=2.5)
            else:   
                window['-ST'].update("Done")
                sg.popup_quick_message("Achieve successfully extracted.", auto_close_duration=2.5)
        elif file_safe == None and output_safe == None:
            window['-ST'].update("Failed saftey check")
            if sg.popup_yes_no("Failed to check the saftey of the file.\nDo you want to ignore this warning and continue?(NOT RECOMMENDED)", title="Warning") == "Yes":
                try:
                    Archive(file_path).extractall(output_path)
                except Exception as err:
                    window['-ST'].update("ERROR")
                    sg.popup_error(f"ERROR OCCURRED WHILE EXTRACTING\n\nMORE INFORMATION:{err}", title="Error", icon=ERR_ICN)
            else:
               window['-ST'].update("Done")
               sg.popup_quick_message("Achieve successfully extracted.", auto_close_duration=2.5) 
        elif file_safe == True and output_safe == False:
            window['-ST'].update("Failed to get a safe output")
            if sg.popup_yes_no("Failed to detect the output.\nDo you want to choose the output?", title="Warning") == "Yes":
                custom_user_output = sg.popup_get_folder("Choose a folder where the result will be put in there", title="Custom Output")
                try:
                    Archive(file_path).extractall(custom_user_output)
                except Exception as err:
                    window['-ST'].update("ERROR")
                    sg.popup_error(f"ERROR OCCURRED WHILE EXTRACTING\n\nMORE INFORMATION:{err}", title="Error", icon=ERR_ICN)
            else:
               window['-ST'].update("Done")
               sg.popup_quick_message("Achieve successfully extracted.", auto_close_duration=2.5)
            
        elif file_safe == False and output_safe == False:
            window['-ST'].update("Not safe to continue")
            sg.popup(f"Saftey check reults are not good enough to continue.\nThese are the results:\n\nOutput(the folder where the results are moved to): BAD\nInput(the file you gave to the program to extract): BAD", title="ERROR", icon=ERR_ICN)
            window['-ST'].update("")
        elif file_safe == False and output_safe == True:
            window['-ST'].update("File is not safe to be extracted")
            if sg.popup_yes_no("File is not safe to be extracted.\nThis happens when the format is wrong or the file is corrupted.\nnDo you want to ignore this warning and continue?(NOT RECOMMENDED)?", title="Warning") == "Yes":
                custom_user_output = sg.popup_get_folder("Choose a folder where the result will be put in there", title="Custom Output")
                try:
                    Archive(file_path).extractall(output_path)
                except Exception as err:
                    window['-ST'].update("ERROR")
                    sg.popup_error(f"ERROR OCCURRED WHILE EXTRACTING\n\nMORE INFORMATION:{err}", title="Error", icon=ERR_ICN)
            else:
               window['-ST'].update("Done")
               sg.popup_quick_message("Achieve successfully extracted.", auto_close_duration=2.5) 
window.close()